{"version":3,"sources":["Notepicker.js","App.js","serviceWorker.js","index.js"],"names":["SEMITONES","INITIAL_NOTES","Array","fill","Notepicker","inst","Instrument","useState","notes","setNotes","bpm","Table","bordered","map","tone","key","keys","i","className","onClick","temp_notes","slice","Button","console","log","join","play","tempo","App","Navbar","Brand","href","Collapse","Text","icon","faLink","faCog","Container","Row","Col","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAMMA,G,MAAY,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,OAExEC,EAAgB,IAAIC,MADR,IACyBC,KAAK,KAEjC,SAASC,IACtB,IAAIC,EAAO,IAAIC,aADoB,EAETC,mBAASN,GAFA,mBAE5BO,EAF4B,KAErBC,EAFqB,OAGbF,mBAAS,KAHI,mBAG5BG,EAH4B,UAKnC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAOC,UAAQ,GACb,+BAEIZ,EAAUa,KAAI,SAACC,GACb,OAAO,wBAAIC,IAAKD,GACb,YAAIZ,MAfH,IAeoBc,QAAQH,KAAI,SAACI,GACjC,OAAO,wBACLC,UAAWV,EAAMS,KAAOH,EAAO,gBAAkB,aACjDC,IAAKE,EAAIH,EACTK,QAAS,WACPd,EAAKS,KAAKA,GACV,IAAIM,EAAaZ,EAAMa,QACvBD,EAAWH,GAAKH,EAChBL,EAASW,KAERN,YAQjB,kBAACQ,EAAA,EAAD,CAAQH,QAAS,WACfI,QAAQC,IAAIhB,EAAMiB,KAAK,KACvBpB,EAAKqB,KAAK,CAACC,MAAOjB,GAAKF,EAAMiB,KAAK,OAFpC,S,0DCcSG,MA5Cf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAOC,MAAR,CAAcC,KAAK,KAAnB,cACA,kBAACF,EAAA,EAAOG,SAAR,CAAiBd,UAAU,uBACzB,kBAACW,EAAA,EAAOI,KAAR,KACE,kBAAC,IAAD,CAAiBC,KAAMC,OAEzB,kBAACN,EAAA,EAAOI,KAAR,KACE,kBAAC,IAAD,CAAiBC,KAAME,SAI7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,QAGJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAClB,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,mBAEF,kBAACiB,EAAA,EAAD,CAAKC,GAAI,GAEP,kBAAClB,EAAA,EAAD,+BAGF,kBAACiB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAClB,EAAA,EAAD,oBC9BQmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.7ca2eb18.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Table, Container, Button } from 'react-bootstrap';\nimport { Instrument } from 'musical.js';\n\nimport './Notepicker.css';\n\nconst SEMITONES = ['A', '^A', 'B', 'C', '^C', 'D', '^D', 'E', 'F', '^F', 'G', '^G'];\nconst NUM_BEATS = 16;\nconst INITIAL_NOTES = new Array(NUM_BEATS).fill('z');\n\nexport default function Notepicker() {\n  let inst = new Instrument();\n  const [notes, setNotes] = useState(INITIAL_NOTES);\n  const [bpm, setBpm] = useState(120);\n\n  return (\n    <>\n      <Table bordered>\n        <tbody>\n          {\n            SEMITONES.map((tone) => {\n              return <tr key={tone}>\n                {[...Array(NUM_BEATS).keys()].map((i) => {\n                  return <td \n                    className={notes[i] === tone ? \"selected-note\" : \"unselected\" }\n                    key={i + tone}\n                    onClick={() => {\n                      inst.tone(tone);\n                      let temp_notes = notes.slice();\n                      temp_notes[i] = tone;\n                      setNotes(temp_notes);\n                    }}>\n                      {tone}\n                    </td>\n                })}\n              </tr>\n            })\n          }\n        </tbody>\n      </Table>\n      <Button onClick={() => {\n        console.log(notes.join(\"\"));\n        inst.play({tempo: bpm},notes.join(\"\"),);\n      }}>\n        Play\n      </Button>\n    </>\n  )\n}\n\n// function Note({ inst, tone, setNote, selected }) {\n//   return (\n//     <td \n//     className={selected ? \"selected-note\" : \"\"}\n//     onClick={() => {\n//       inst.tone(tone);\n//       setNote();\n//     }}>\n//       {tone}\n//     </td>\n//   )\n// }\n","import React from 'react';\nimport './App.css';\nimport Notepicker from './Notepicker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog, faLink } from '@fortawesome/free-solid-svg-icons';\n\nimport { Navbar, Row, Col, Button, Container } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <>\n      <Navbar>\n        <Navbar.Brand href=\"#\">Robotechno</Navbar.Brand>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text>\n            <FontAwesomeIcon icon={faLink}/>\n          </Navbar.Text>\n          <Navbar.Text>\n            <FontAwesomeIcon icon={faCog}/>\n          </Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container>\n        <Row>\n          <Col md={12}>\n            <Notepicker />\n          </Col>\n        </Row>\n        <Row>\n          <Col md={6}>\n            <Button>trumpet</Button>\n            <Button>snare</Button>\n            <Button>saxophone</Button>\n          </Col>\n          <Col md={3}>\n            {/* <Button>play</Button> */}\n            <Button>change time signature</Button>\n\n          </Col>\n          <Col md={3}>\n            <Button>submit</Button>\n\n          </Col>\n        </Row>\n      </Container>\n\n\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}